<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.project.mapper.BoardMapper">
	
	<!-- 전체조회 -->
	<!-- <select id="list" resultType="com.project.domain.BoardDTO">
		select post_id,post_title,userid,post_regdate from post order by post_id desc, post_regdate desc
	</select> -->
	
	<!-- 페이지 나누기 조회 -->
	<select id="list" resultType="com.project.domain.BoardDTO">
		<![CDATA[
			select post_id,post_title,userid,post_regdate,post_content,replycnt
			from (select /*+INDEX_DESC(post pk_post)*/ rownum rn, post_id, post_title, userid,post_regdate,post_content,replycnt
			      from post
			      where 
		]]>	 
			<include refid="criteria"></include>		     
		<![CDATA[	      
			      
			      rownum <= (#{page}*#{amount}))
			where rn > (#{page}-1)*#{amount}		
		]]>	
	</select>
	
	<!-- 전체 게시물 개수 : totalCnt -->
	<select id="totalCnt" resultType="java.lang.Integer">
		select count(*) from post
		where
			<include refid="criteria"></include>
		post_id > 0		
	</select>
	
	<!-- 댓글 수 추가  -->
	<update id="updateReplyCnt">
		update post set replycnt = replycnt + #{amount}
		where post_id=#{postId}
	</update>
	
	
	
	
	
	<!-- 동적 쿼리 
	
		board/list?page=1&amount=20&type=T&keyword=파이썬     요청
	
	    collection="typeArr" => Criteria 객체의 getTypeArr() 메소드 실행됨 => [T]
	    item="type" => 배열 요소를 접근하기 위한 변수  
	-->
	<sql id="criteria">
		<trim prefix="(" suffix=") AND" prefixOverrides="OR">
			<foreach collection="typeArr" item="type">
				<trim prefix="OR">
					<choose>
						<when test="type == 'T'.toString()">
							post_title like '%'||#{keyword}||'%' 
						</when>
						<when test="type == 'C'.toString()">
							post_content like '%'||#{keyword}||'%' 
						</when>
						<when test="type == 'W'.toString()">
							userid like '%'||#{keyword}||'%' 
						</when>
					</choose>
				</trim>
			</foreach>
		</trim>
	</sql>
	
	
	
	<!-- 글 등록 -->
	<insert id="insert">
		<!-- 주로 pk 값을 미리 SQL 을 통해서 처리해 두고 특정한 이름으로 결과를 보관 -->
		<selectKey keyProperty="post_id" order="BEFORE" resultType="int">
			select post_seq.nextval from dual
		</selectKey>	
	
		insert into post(post_id,post_title,post_content,userid) 
		values(#{postId},#{postTitle},#{postContent},#{userid})
	</insert>

	<!-- 특정 번호 조회  -->
	<select id="get" resultType="com.project.domain.BoardDTO">
		select post_id,post_title,userid,post_content from post where post_id=#{postId}
	</select>
	
	<!-- 특정 번호 조회 + 파일 정보 
	     property : dto 변수명과 일치
	-->
	<resultMap type="com.project.domain.BoardDTO" id="boardMap">
		<id property="postId" column="post_id"/>
		<result property="postTitle" column="post_title"/>
		<result property="postContent" column="post_content"/>
		<result property="userid" column="userid"/>
		<collection property="attachList" resultMap="attachMap"/>
	</resultMap>	
	<resultMap type="com.project.domain.AttachFileDTO" id="attachMap">
		<result property="uuid" column="uuid"/>
		<result property="uploadPath" column="uploadPath"/>
		<result property="fileName" column="fileName"/>
		<result property="fileType" column="fileType"/>
		<result property="postId" column="post_id"/>
	</resultMap>	
	<select id="readAttach" resultMap="boardMap">
		select post_title,post_content,userid,sa.post_id, uuid, uploadpath,filetype,filename
		from post sb join attach sa on sb.post_id = sa.post_id
		where sb.post_id=#{postId}	
	</select>
	
	
	
	
	<!-- 글 수정 : post_id 일치 시 (post_title, post_content, updatedate) -->
	<update id="update">
		update post set post_title=#{postTitle}, post_content=#{postContent}
		where post_id=#{postId}
	</update>
	
	<!-- 글 삭제 -->
	<delete id="delete">
		delete from post where post_id=#{postId}
	</delete>
</mapper>















